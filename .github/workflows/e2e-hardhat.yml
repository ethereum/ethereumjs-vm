name: E2E Hardhat Tests
on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    types: [opened, reopened, synchronize]
    
env:
  cwd: ${{github.workspace}}

jobs:
  e2e-hardhat:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [15]
    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      # Use a dependency cache to speed up runs of same deps
      - name: Dependency cache
        uses: actions/cache@v2
        id: cache
        with:
          key: E2e-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          path: |
            **/node_modules

      # Build if cache is restored
      - run: npm run build
        if: steps.cache.outputs.cache-hit == 'true'

      # Otherwise, run install (which also runs bootstrap and build)
      - run: npm install
        if: steps.cache.outputs.cache-hit != 'true'

      # Publish all packages to virtual npm registry
      # after giving each a minor version bump
      - name: Publish to virtual registry
        run: npm run e2e:publish

      # Generate the resolutions file
      - name: Generate e2e resolutions
        run: npm run e2e:resolutions

      # Clone hardhat repo, inject proxied dependencies, and run tests
      - name: Build hardhat and test with new EthereumJS dependencies
        env:
          FORCE_COLOR: 3
          INFURA_URL: ${{ secrets.URL_MAINNET }}
        run: bash ./scripts/e2e-hardhat.sh

      - name: Remove hardhat directory to clean working state (for saving dependency cache)
        run: rm -rf hardhat
