'use strict';

/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.org.kframework.kevm.extvm.Account', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.BlockHeader', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.Blockhash', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.CallContext', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.CallResult', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.Code', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.EthereumConfig', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.GetAccount', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.GetBlockhash', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.GetCode', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.GetStorageData', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.Hello', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.IeleConfig', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.LogEntry', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.ModifiedAccount', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.StorageData', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.StorageUpdate', null, global);
goog.exportSymbol('proto.org.kframework.kevm.extvm.VMQuery', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.Hello = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.org.kframework.kevm.extvm.Hello.oneofGroups_);
};
goog.inherits(proto.org.kframework.kevm.extvm.Hello, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.Hello.displayName = 'proto.org.kframework.kevm.extvm.Hello';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.org.kframework.kevm.extvm.Hello.oneofGroups_ = [[2, 3]];

/**
 * @enum {number}
 */
proto.org.kframework.kevm.extvm.Hello.ConfigCase = {
  CONFIG_NOT_SET: 0,
  ETHEREUMCONFIG: 2,
  IELECONFIG: 3
};

/**
 * @return {proto.org.kframework.kevm.extvm.Hello.ConfigCase}
 */
proto.org.kframework.kevm.extvm.Hello.prototype.getConfigCase = function () {
  return (/** @type {proto.org.kframework.kevm.extvm.Hello.ConfigCase} */jspb.Message.computeOneofCase(this, proto.org.kframework.kevm.extvm.Hello.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.Hello.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.Hello.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.Hello} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.Hello.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      version: msg.getVersion(),
      ethereumconfig: (f = msg.getEthereumconfig()) && proto.org.kframework.kevm.extvm.EthereumConfig.toObject(includeInstance, f),
      ieleconfig: (f = msg.getIeleconfig()) && proto.org.kframework.kevm.extvm.IeleConfig.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.Hello}
 */
proto.org.kframework.kevm.extvm.Hello.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.Hello();
  return proto.org.kframework.kevm.extvm.Hello.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.Hello} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.Hello}
 */
proto.org.kframework.kevm.extvm.Hello.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */reader.readString();
        msg.setVersion(value);
        break;
      case 2:
        var value = new proto.org.kframework.kevm.extvm.EthereumConfig();
        reader.readMessage(value, proto.org.kframework.kevm.extvm.EthereumConfig.deserializeBinaryFromReader);
        msg.setEthereumconfig(value);
        break;
      case 3:
        var value = new proto.org.kframework.kevm.extvm.IeleConfig();
        reader.readMessage(value, proto.org.kframework.kevm.extvm.IeleConfig.deserializeBinaryFromReader);
        msg.setIeleconfig(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.Hello} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.Hello.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.Hello.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.Hello.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVersion();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = this.getEthereumconfig();
  if (f != null) {
    writer.writeMessage(2, f, proto.org.kframework.kevm.extvm.EthereumConfig.serializeBinaryToWriter);
  }
  f = this.getIeleconfig();
  if (f != null) {
    writer.writeMessage(3, f, proto.org.kframework.kevm.extvm.IeleConfig.serializeBinaryToWriter);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.Hello} The clone.
 */
proto.org.kframework.kevm.extvm.Hello.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.Hello} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional string version = 1;
 * @return {string}
 */
proto.org.kframework.kevm.extvm.Hello.prototype.getVersion = function () {
  return (/** @type {string} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/** @param {string} value  */
proto.org.kframework.kevm.extvm.Hello.prototype.setVersion = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional EthereumConfig ethereumConfig = 2;
 * @return {proto.org.kframework.kevm.extvm.EthereumConfig}
 */
proto.org.kframework.kevm.extvm.Hello.prototype.getEthereumconfig = function () {
  return (/** @type{proto.org.kframework.kevm.extvm.EthereumConfig} */jspb.Message.getWrapperField(this, proto.org.kframework.kevm.extvm.EthereumConfig, 2)
  );
};

/** @param {proto.org.kframework.kevm.extvm.EthereumConfig|undefined} value  */
proto.org.kframework.kevm.extvm.Hello.prototype.setEthereumconfig = function (value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.org.kframework.kevm.extvm.Hello.oneofGroups_[0], value);
};

proto.org.kframework.kevm.extvm.Hello.prototype.clearEthereumconfig = function () {
  this.setEthereumconfig(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.org.kframework.kevm.extvm.Hello.prototype.hasEthereumconfig = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional IeleConfig ieleConfig = 3;
 * @return {proto.org.kframework.kevm.extvm.IeleConfig}
 */
proto.org.kframework.kevm.extvm.Hello.prototype.getIeleconfig = function () {
  return (/** @type{proto.org.kframework.kevm.extvm.IeleConfig} */jspb.Message.getWrapperField(this, proto.org.kframework.kevm.extvm.IeleConfig, 3)
  );
};

/** @param {proto.org.kframework.kevm.extvm.IeleConfig|undefined} value  */
proto.org.kframework.kevm.extvm.Hello.prototype.setIeleconfig = function (value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.org.kframework.kevm.extvm.Hello.oneofGroups_[0], value);
};

proto.org.kframework.kevm.extvm.Hello.prototype.clearIeleconfig = function () {
  this.setIeleconfig(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.org.kframework.kevm.extvm.Hello.prototype.hasIeleconfig = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.CallContext = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.org.kframework.kevm.extvm.CallContext.oneofGroups_);
};
goog.inherits(proto.org.kframework.kevm.extvm.CallContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.CallContext.displayName = 'proto.org.kframework.kevm.extvm.CallContext';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.org.kframework.kevm.extvm.CallContext.oneofGroups_ = [[8, 9]];

/**
 * @enum {number}
 */
proto.org.kframework.kevm.extvm.CallContext.ConfigCase = {
  CONFIG_NOT_SET: 0,
  ETHEREUMCONFIG: 8,
  IELECONFIG: 9
};

/**
 * @return {proto.org.kframework.kevm.extvm.CallContext.ConfigCase}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getConfigCase = function () {
  return (/** @type {proto.org.kframework.kevm.extvm.CallContext.ConfigCase} */jspb.Message.computeOneofCase(this, proto.org.kframework.kevm.extvm.CallContext.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.CallContext.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.CallContext.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.CallContext} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.CallContext.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      calleraddr: msg.getCalleraddr_asB64(),
      recipientaddr: msg.getRecipientaddr_asB64(),
      inputdata: msg.getInputdata_asB64(),
      callvalue: msg.getCallvalue_asB64(),
      gasprice: msg.getGasprice_asB64(),
      gasprovided: msg.getGasprovided_asB64(),
      blockheader: (f = msg.getBlockheader()) && proto.org.kframework.kevm.extvm.BlockHeader.toObject(includeInstance, f),
      ethereumconfig: (f = msg.getEthereumconfig()) && proto.org.kframework.kevm.extvm.EthereumConfig.toObject(includeInstance, f),
      ieleconfig: (f = msg.getIeleconfig()) && proto.org.kframework.kevm.extvm.IeleConfig.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.CallContext}
 */
proto.org.kframework.kevm.extvm.CallContext.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.CallContext();
  return proto.org.kframework.kevm.extvm.CallContext.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.CallContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.CallContext}
 */
proto.org.kframework.kevm.extvm.CallContext.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setCalleraddr(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setRecipientaddr(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setInputdata(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setCallvalue(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setGasprice(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setGasprovided(value);
        break;
      case 7:
        var value = new proto.org.kframework.kevm.extvm.BlockHeader();
        reader.readMessage(value, proto.org.kframework.kevm.extvm.BlockHeader.deserializeBinaryFromReader);
        msg.setBlockheader(value);
        break;
      case 8:
        var value = new proto.org.kframework.kevm.extvm.EthereumConfig();
        reader.readMessage(value, proto.org.kframework.kevm.extvm.EthereumConfig.deserializeBinaryFromReader);
        msg.setEthereumconfig(value);
        break;
      case 9:
        var value = new proto.org.kframework.kevm.extvm.IeleConfig();
        reader.readMessage(value, proto.org.kframework.kevm.extvm.IeleConfig.deserializeBinaryFromReader);
        msg.setIeleconfig(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.CallContext} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.CallContext.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCalleraddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = this.getRecipientaddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = this.getInputdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = this.getCallvalue_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = this.getGasprice_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
  f = this.getGasprovided_asU8();
  if (f.length > 0) {
    writer.writeBytes(6, f);
  }
  f = this.getBlockheader();
  if (f != null) {
    writer.writeMessage(7, f, proto.org.kframework.kevm.extvm.BlockHeader.serializeBinaryToWriter);
  }
  f = this.getEthereumconfig();
  if (f != null) {
    writer.writeMessage(8, f, proto.org.kframework.kevm.extvm.EthereumConfig.serializeBinaryToWriter);
  }
  f = this.getIeleconfig();
  if (f != null) {
    writer.writeMessage(9, f, proto.org.kframework.kevm.extvm.IeleConfig.serializeBinaryToWriter);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.CallContext} The clone.
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.CallContext} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes callerAddr = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getCalleraddr = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes callerAddr = 1;
 * This is a type-conversion wrapper around `getCalleraddr()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getCalleraddr_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getCalleraddr())
  );
};

/**
 * optional bytes callerAddr = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCalleraddr()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getCalleraddr_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getCalleraddr())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.CallContext.prototype.setCalleraddr = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes recipientAddr = 2;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getRecipientaddr = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 2, "")
  );
};

/**
 * optional bytes recipientAddr = 2;
 * This is a type-conversion wrapper around `getRecipientaddr()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getRecipientaddr_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getRecipientaddr())
  );
};

/**
 * optional bytes recipientAddr = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecipientaddr()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getRecipientaddr_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getRecipientaddr())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.CallContext.prototype.setRecipientaddr = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional bytes inputData = 3;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getInputdata = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 3, "")
  );
};

/**
 * optional bytes inputData = 3;
 * This is a type-conversion wrapper around `getInputdata()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getInputdata_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getInputdata())
  );
};

/**
 * optional bytes inputData = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInputdata()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getInputdata_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getInputdata())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.CallContext.prototype.setInputdata = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional bytes callValue = 4;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getCallvalue = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 4, "")
  );
};

/**
 * optional bytes callValue = 4;
 * This is a type-conversion wrapper around `getCallvalue()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getCallvalue_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getCallvalue())
  );
};

/**
 * optional bytes callValue = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCallvalue()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getCallvalue_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getCallvalue())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.CallContext.prototype.setCallvalue = function (value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional bytes gasPrice = 5;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getGasprice = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 5, "")
  );
};

/**
 * optional bytes gasPrice = 5;
 * This is a type-conversion wrapper around `getGasprice()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getGasprice_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getGasprice())
  );
};

/**
 * optional bytes gasPrice = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasprice()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getGasprice_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getGasprice())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.CallContext.prototype.setGasprice = function (value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * optional bytes gasProvided = 6;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getGasprovided = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 6, "")
  );
};

/**
 * optional bytes gasProvided = 6;
 * This is a type-conversion wrapper around `getGasprovided()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getGasprovided_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getGasprovided())
  );
};

/**
 * optional bytes gasProvided = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasprovided()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getGasprovided_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getGasprovided())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.CallContext.prototype.setGasprovided = function (value) {
  jspb.Message.setField(this, 6, value);
};

/**
 * optional BlockHeader blockHeader = 7;
 * @return {proto.org.kframework.kevm.extvm.BlockHeader}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getBlockheader = function () {
  return (/** @type{proto.org.kframework.kevm.extvm.BlockHeader} */jspb.Message.getWrapperField(this, proto.org.kframework.kevm.extvm.BlockHeader, 7)
  );
};

/** @param {proto.org.kframework.kevm.extvm.BlockHeader|undefined} value  */
proto.org.kframework.kevm.extvm.CallContext.prototype.setBlockheader = function (value) {
  jspb.Message.setWrapperField(this, 7, value);
};

proto.org.kframework.kevm.extvm.CallContext.prototype.clearBlockheader = function () {
  this.setBlockheader(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.hasBlockheader = function () {
  return jspb.Message.getField(this, 7) != null;
};

/**
 * optional EthereumConfig ethereumConfig = 8;
 * @return {proto.org.kframework.kevm.extvm.EthereumConfig}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getEthereumconfig = function () {
  return (/** @type{proto.org.kframework.kevm.extvm.EthereumConfig} */jspb.Message.getWrapperField(this, proto.org.kframework.kevm.extvm.EthereumConfig, 8)
  );
};

/** @param {proto.org.kframework.kevm.extvm.EthereumConfig|undefined} value  */
proto.org.kframework.kevm.extvm.CallContext.prototype.setEthereumconfig = function (value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.org.kframework.kevm.extvm.CallContext.oneofGroups_[0], value);
};

proto.org.kframework.kevm.extvm.CallContext.prototype.clearEthereumconfig = function () {
  this.setEthereumconfig(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.hasEthereumconfig = function () {
  return jspb.Message.getField(this, 8) != null;
};

/**
 * optional IeleConfig ieleConfig = 9;
 * @return {proto.org.kframework.kevm.extvm.IeleConfig}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.getIeleconfig = function () {
  return (/** @type{proto.org.kframework.kevm.extvm.IeleConfig} */jspb.Message.getWrapperField(this, proto.org.kframework.kevm.extvm.IeleConfig, 9)
  );
};

/** @param {proto.org.kframework.kevm.extvm.IeleConfig|undefined} value  */
proto.org.kframework.kevm.extvm.CallContext.prototype.setIeleconfig = function (value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.org.kframework.kevm.extvm.CallContext.oneofGroups_[0], value);
};

proto.org.kframework.kevm.extvm.CallContext.prototype.clearIeleconfig = function () {
  this.setIeleconfig(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.org.kframework.kevm.extvm.CallContext.prototype.hasIeleconfig = function () {
  return jspb.Message.getField(this, 9) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.BlockHeader = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.kframework.kevm.extvm.BlockHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.BlockHeader.displayName = 'proto.org.kframework.kevm.extvm.BlockHeader';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.BlockHeader.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.BlockHeader.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.BlockHeader} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.BlockHeader.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      beneficiary: msg.getBeneficiary_asB64(),
      difficulty: msg.getDifficulty_asB64(),
      number: msg.getNumber_asB64(),
      gaslimit: msg.getGaslimit_asB64(),
      unixtimestamp: msg.getUnixtimestamp()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.BlockHeader}
 */
proto.org.kframework.kevm.extvm.BlockHeader.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.BlockHeader();
  return proto.org.kframework.kevm.extvm.BlockHeader.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.BlockHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.BlockHeader}
 */
proto.org.kframework.kevm.extvm.BlockHeader.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setBeneficiary(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setDifficulty(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setNumber(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setGaslimit(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readInt64();
        msg.setUnixtimestamp(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.BlockHeader} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.BlockHeader.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBeneficiary_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = this.getDifficulty_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = this.getNumber_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = this.getGaslimit_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = this.getUnixtimestamp();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.BlockHeader} The clone.
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.BlockHeader} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes beneficiary = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.getBeneficiary = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes beneficiary = 1;
 * This is a type-conversion wrapper around `getBeneficiary()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.getBeneficiary_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getBeneficiary())
  );
};

/**
 * optional bytes beneficiary = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBeneficiary()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.getBeneficiary_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getBeneficiary())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.setBeneficiary = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes difficulty = 2;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.getDifficulty = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 2, "")
  );
};

/**
 * optional bytes difficulty = 2;
 * This is a type-conversion wrapper around `getDifficulty()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.getDifficulty_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getDifficulty())
  );
};

/**
 * optional bytes difficulty = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDifficulty()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.getDifficulty_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getDifficulty())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.setDifficulty = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional bytes number = 3;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.getNumber = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 3, "")
  );
};

/**
 * optional bytes number = 3;
 * This is a type-conversion wrapper around `getNumber()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.getNumber_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getNumber())
  );
};

/**
 * optional bytes number = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNumber()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.getNumber_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getNumber())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.setNumber = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional bytes gasLimit = 4;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.getGaslimit = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 4, "")
  );
};

/**
 * optional bytes gasLimit = 4;
 * This is a type-conversion wrapper around `getGaslimit()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.getGaslimit_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getGaslimit())
  );
};

/**
 * optional bytes gasLimit = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGaslimit()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.getGaslimit_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getGaslimit())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.setGaslimit = function (value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional int64 unixTimestamp = 5;
 * @return {number}
 */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.getUnixtimestamp = function () {
  return (/** @type {number} */jspb.Message.getFieldProto3(this, 5, 0)
  );
};

/** @param {number} value  */
proto.org.kframework.kevm.extvm.BlockHeader.prototype.setUnixtimestamp = function (value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.EthereumConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.kframework.kevm.extvm.EthereumConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.EthereumConfig.displayName = 'proto.org.kframework.kevm.extvm.EthereumConfig';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.EthereumConfig.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.EthereumConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.EthereumConfig} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.EthereumConfig.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      frontierblocknumber: msg.getFrontierblocknumber_asB64(),
      homesteadblocknumber: msg.getHomesteadblocknumber_asB64(),
      eip150blocknumber: msg.getEip150blocknumber_asB64(),
      eip160blocknumber: msg.getEip160blocknumber_asB64(),
      eip161blocknumber: msg.getEip161blocknumber_asB64(),
      maxcodesize: msg.getMaxcodesize_asB64(),
      accountstartnonce: msg.getAccountstartnonce_asB64(),
      byzantiumblocknumber: msg.getByzantiumblocknumber_asB64(),
      constantinopleblocknumber: msg.getConstantinopleblocknumber_asB64(),
      petersburgblocknumber: msg.getPetersburgblocknumber_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.EthereumConfig}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.EthereumConfig();
  return proto.org.kframework.kevm.extvm.EthereumConfig.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.EthereumConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.EthereumConfig}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setFrontierblocknumber(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setHomesteadblocknumber(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setEip150blocknumber(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setEip160blocknumber(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setEip161blocknumber(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setMaxcodesize(value);
        break;
      case 7:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setAccountstartnonce(value);
        break;
      case 8:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setByzantiumblocknumber(value);
        break;
      case 9:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setConstantinopleblocknumber(value);
        break;
      case 10:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setPetersburgblocknumber(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.EthereumConfig} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.EthereumConfig.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFrontierblocknumber_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = this.getHomesteadblocknumber_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = this.getEip150blocknumber_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = this.getEip160blocknumber_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = this.getEip161blocknumber_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
  f = this.getMaxcodesize_asU8();
  if (f.length > 0) {
    writer.writeBytes(6, f);
  }
  f = this.getAccountstartnonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(7, f);
  }
  f = this.getByzantiumblocknumber_asU8();
  if (f.length > 0) {
    writer.writeBytes(8, f);
  }
  f = this.getConstantinopleblocknumber_asU8();
  if (f.length > 0) {
    writer.writeBytes(9, f);
  }
  f = this.getPetersburgblocknumber_asU8();
  if (f.length > 0) {
    writer.writeBytes(10, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.EthereumConfig} The clone.
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.EthereumConfig} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes frontierBlockNumber = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getFrontierblocknumber = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes frontierBlockNumber = 1;
 * This is a type-conversion wrapper around `getFrontierblocknumber()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getFrontierblocknumber_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getFrontierblocknumber())
  );
};

/**
 * optional bytes frontierBlockNumber = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrontierblocknumber()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getFrontierblocknumber_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getFrontierblocknumber())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.setFrontierblocknumber = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes homesteadBlockNumber = 2;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getHomesteadblocknumber = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 2, "")
  );
};

/**
 * optional bytes homesteadBlockNumber = 2;
 * This is a type-conversion wrapper around `getHomesteadblocknumber()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getHomesteadblocknumber_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getHomesteadblocknumber())
  );
};

/**
 * optional bytes homesteadBlockNumber = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHomesteadblocknumber()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getHomesteadblocknumber_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getHomesteadblocknumber())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.setHomesteadblocknumber = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional bytes eip150BlockNumber = 3;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getEip150blocknumber = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 3, "")
  );
};

/**
 * optional bytes eip150BlockNumber = 3;
 * This is a type-conversion wrapper around `getEip150blocknumber()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getEip150blocknumber_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getEip150blocknumber())
  );
};

/**
 * optional bytes eip150BlockNumber = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEip150blocknumber()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getEip150blocknumber_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getEip150blocknumber())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.setEip150blocknumber = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional bytes eip160BlockNumber = 4;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getEip160blocknumber = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 4, "")
  );
};

/**
 * optional bytes eip160BlockNumber = 4;
 * This is a type-conversion wrapper around `getEip160blocknumber()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getEip160blocknumber_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getEip160blocknumber())
  );
};

/**
 * optional bytes eip160BlockNumber = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEip160blocknumber()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getEip160blocknumber_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getEip160blocknumber())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.setEip160blocknumber = function (value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional bytes eip161BlockNumber = 5;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getEip161blocknumber = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 5, "")
  );
};

/**
 * optional bytes eip161BlockNumber = 5;
 * This is a type-conversion wrapper around `getEip161blocknumber()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getEip161blocknumber_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getEip161blocknumber())
  );
};

/**
 * optional bytes eip161BlockNumber = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEip161blocknumber()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getEip161blocknumber_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getEip161blocknumber())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.setEip161blocknumber = function (value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * optional bytes maxCodeSize = 6;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getMaxcodesize = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 6, "")
  );
};

/**
 * optional bytes maxCodeSize = 6;
 * This is a type-conversion wrapper around `getMaxcodesize()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getMaxcodesize_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getMaxcodesize())
  );
};

/**
 * optional bytes maxCodeSize = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMaxcodesize()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getMaxcodesize_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getMaxcodesize())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.setMaxcodesize = function (value) {
  jspb.Message.setField(this, 6, value);
};

/**
 * optional bytes accountStartNonce = 7;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getAccountstartnonce = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 7, "")
  );
};

/**
 * optional bytes accountStartNonce = 7;
 * This is a type-conversion wrapper around `getAccountstartnonce()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getAccountstartnonce_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getAccountstartnonce())
  );
};

/**
 * optional bytes accountStartNonce = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountstartnonce()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getAccountstartnonce_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAccountstartnonce())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.setAccountstartnonce = function (value) {
  jspb.Message.setField(this, 7, value);
};

/**
 * optional bytes byzantiumBlockNumber = 8;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getByzantiumblocknumber = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 8, "")
  );
};

/**
 * optional bytes byzantiumBlockNumber = 8;
 * This is a type-conversion wrapper around `getByzantiumblocknumber()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getByzantiumblocknumber_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getByzantiumblocknumber())
  );
};

/**
 * optional bytes byzantiumBlockNumber = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getByzantiumblocknumber()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getByzantiumblocknumber_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getByzantiumblocknumber())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.setByzantiumblocknumber = function (value) {
  jspb.Message.setField(this, 8, value);
};

/**
 * optional bytes constantinopleBlockNumber = 9;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getConstantinopleblocknumber = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 9, "")
  );
};

/**
 * optional bytes constantinopleBlockNumber = 9;
 * This is a type-conversion wrapper around `getConstantinopleblocknumber()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getConstantinopleblocknumber_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getConstantinopleblocknumber())
  );
};

/**
 * optional bytes constantinopleBlockNumber = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConstantinopleblocknumber()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getConstantinopleblocknumber_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getConstantinopleblocknumber())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.setConstantinopleblocknumber = function (value) {
  jspb.Message.setField(this, 9, value);
};

/**
 * optional bytes petersburgBlockNumber = 10;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getPetersburgblocknumber = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 10, "")
  );
};

/**
 * optional bytes petersburgBlockNumber = 10;
 * This is a type-conversion wrapper around `getPetersburgblocknumber()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getPetersburgblocknumber_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getPetersburgblocknumber())
  );
};

/**
 * optional bytes petersburgBlockNumber = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPetersburgblocknumber()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.getPetersburgblocknumber_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getPetersburgblocknumber())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.EthereumConfig.prototype.setPetersburgblocknumber = function (value) {
  jspb.Message.setField(this, 10, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.IeleConfig = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.kframework.kevm.extvm.IeleConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.IeleConfig.displayName = 'proto.org.kframework.kevm.extvm.IeleConfig';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.IeleConfig.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.IeleConfig.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.IeleConfig} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.IeleConfig.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      danseblocknumber: msg.getDanseblocknumber_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.IeleConfig}
 */
proto.org.kframework.kevm.extvm.IeleConfig.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.IeleConfig();
  return proto.org.kframework.kevm.extvm.IeleConfig.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.IeleConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.IeleConfig}
 */
proto.org.kframework.kevm.extvm.IeleConfig.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setDanseblocknumber(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.IeleConfig} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.IeleConfig.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.IeleConfig.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.IeleConfig.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDanseblocknumber_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.IeleConfig} The clone.
 */
proto.org.kframework.kevm.extvm.IeleConfig.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.IeleConfig} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes danseBlockNumber = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.IeleConfig.prototype.getDanseblocknumber = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes danseBlockNumber = 1;
 * This is a type-conversion wrapper around `getDanseblocknumber()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.IeleConfig.prototype.getDanseblocknumber_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getDanseblocknumber())
  );
};

/**
 * optional bytes danseBlockNumber = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDanseblocknumber()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.IeleConfig.prototype.getDanseblocknumber_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getDanseblocknumber())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.IeleConfig.prototype.setDanseblocknumber = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.GetAccount = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.kframework.kevm.extvm.GetAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.GetAccount.displayName = 'proto.org.kframework.kevm.extvm.GetAccount';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.GetAccount.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.GetAccount.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.GetAccount} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.GetAccount.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      address: msg.getAddress_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.GetAccount}
 */
proto.org.kframework.kevm.extvm.GetAccount.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.GetAccount();
  return proto.org.kframework.kevm.extvm.GetAccount.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.GetAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.GetAccount}
 */
proto.org.kframework.kevm.extvm.GetAccount.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.GetAccount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.GetAccount.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.GetAccount.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.GetAccount.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.GetAccount} The clone.
 */
proto.org.kframework.kevm.extvm.GetAccount.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.GetAccount} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.GetAccount.prototype.getAddress = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.GetAccount.prototype.getAddress_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getAddress())
  );
};

/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.GetAccount.prototype.getAddress_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAddress())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.GetAccount.prototype.setAddress = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.Account = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.kframework.kevm.extvm.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.Account.displayName = 'proto.org.kframework.kevm.extvm.Account';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.Account.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.Account.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.Account} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.Account.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      nonce: msg.getNonce_asB64(),
      balance: msg.getBalance_asB64(),
      codeempty: msg.getCodeempty()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.Account}
 */
proto.org.kframework.kevm.extvm.Account.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.Account();
  return proto.org.kframework.kevm.extvm.Account.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.Account}
 */
proto.org.kframework.kevm.extvm.Account.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setNonce(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setBalance(value);
        break;
      case 3:
        var value = /** @type {boolean} */reader.readBool();
        msg.setCodeempty(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.Account} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.Account.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.Account.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.Account.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = this.getBalance_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = this.getCodeempty();
  if (f) {
    writer.writeBool(3, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.Account} The clone.
 */
proto.org.kframework.kevm.extvm.Account.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.Account} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.Account.prototype.getNonce = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.Account.prototype.getNonce_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getNonce())
  );
};

/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.Account.prototype.getNonce_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getNonce())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.Account.prototype.setNonce = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes balance = 2;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.Account.prototype.getBalance = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 2, "")
  );
};

/**
 * optional bytes balance = 2;
 * This is a type-conversion wrapper around `getBalance()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.Account.prototype.getBalance_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getBalance())
  );
};

/**
 * optional bytes balance = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBalance()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.Account.prototype.getBalance_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getBalance())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.Account.prototype.setBalance = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional bool codeEmpty = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.org.kframework.kevm.extvm.Account.prototype.getCodeempty = function () {
  return (/** @type {boolean} */jspb.Message.getFieldProto3(this, 3, false)
  );
};

/** @param {boolean} value  */
proto.org.kframework.kevm.extvm.Account.prototype.setCodeempty = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.GetStorageData = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.kframework.kevm.extvm.GetStorageData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.GetStorageData.displayName = 'proto.org.kframework.kevm.extvm.GetStorageData';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.GetStorageData.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.GetStorageData.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.GetStorageData} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.GetStorageData.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      address: msg.getAddress_asB64(),
      offset: msg.getOffset_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.GetStorageData}
 */
proto.org.kframework.kevm.extvm.GetStorageData.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.GetStorageData();
  return proto.org.kframework.kevm.extvm.GetStorageData.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.GetStorageData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.GetStorageData}
 */
proto.org.kframework.kevm.extvm.GetStorageData.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setOffset(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.GetStorageData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.GetStorageData.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.GetStorageData.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.GetStorageData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = this.getOffset_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.GetStorageData} The clone.
 */
proto.org.kframework.kevm.extvm.GetStorageData.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.GetStorageData} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.GetStorageData.prototype.getAddress = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.GetStorageData.prototype.getAddress_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getAddress())
  );
};

/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.GetStorageData.prototype.getAddress_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAddress())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.GetStorageData.prototype.setAddress = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes offset = 2;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.GetStorageData.prototype.getOffset = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 2, "")
  );
};

/**
 * optional bytes offset = 2;
 * This is a type-conversion wrapper around `getOffset()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.GetStorageData.prototype.getOffset_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getOffset())
  );
};

/**
 * optional bytes offset = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOffset()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.GetStorageData.prototype.getOffset_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getOffset())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.GetStorageData.prototype.setOffset = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.StorageData = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.kframework.kevm.extvm.StorageData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.StorageData.displayName = 'proto.org.kframework.kevm.extvm.StorageData';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.StorageData.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.StorageData.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.StorageData} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.StorageData.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      data: msg.getData_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.StorageData}
 */
proto.org.kframework.kevm.extvm.StorageData.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.StorageData();
  return proto.org.kframework.kevm.extvm.StorageData.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.StorageData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.StorageData}
 */
proto.org.kframework.kevm.extvm.StorageData.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.StorageData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.StorageData.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.StorageData.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.StorageData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.StorageData} The clone.
 */
proto.org.kframework.kevm.extvm.StorageData.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.StorageData} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.StorageData.prototype.getData = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.StorageData.prototype.getData_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getData())
  );
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.StorageData.prototype.getData_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getData())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.StorageData.prototype.setData = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.GetCode = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.kframework.kevm.extvm.GetCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.GetCode.displayName = 'proto.org.kframework.kevm.extvm.GetCode';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.GetCode.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.GetCode.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.GetCode} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.GetCode.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      address: msg.getAddress_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.GetCode}
 */
proto.org.kframework.kevm.extvm.GetCode.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.GetCode();
  return proto.org.kframework.kevm.extvm.GetCode.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.GetCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.GetCode}
 */
proto.org.kframework.kevm.extvm.GetCode.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.GetCode} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.GetCode.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.GetCode.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.GetCode.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.GetCode} The clone.
 */
proto.org.kframework.kevm.extvm.GetCode.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.GetCode} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.GetCode.prototype.getAddress = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.GetCode.prototype.getAddress_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getAddress())
  );
};

/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.GetCode.prototype.getAddress_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAddress())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.GetCode.prototype.setAddress = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.Code = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.kframework.kevm.extvm.Code, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.Code.displayName = 'proto.org.kframework.kevm.extvm.Code';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.Code.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.Code.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.Code} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.Code.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      code: msg.getCode_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.Code}
 */
proto.org.kframework.kevm.extvm.Code.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.Code();
  return proto.org.kframework.kevm.extvm.Code.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.Code} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.Code}
 */
proto.org.kframework.kevm.extvm.Code.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setCode(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.Code} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.Code.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.Code.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.Code.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCode_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.Code} The clone.
 */
proto.org.kframework.kevm.extvm.Code.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.Code} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes code = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.Code.prototype.getCode = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes code = 1;
 * This is a type-conversion wrapper around `getCode()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.Code.prototype.getCode_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getCode())
  );
};

/**
 * optional bytes code = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCode()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.Code.prototype.getCode_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getCode())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.Code.prototype.setCode = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.GetBlockhash = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.kframework.kevm.extvm.GetBlockhash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.GetBlockhash.displayName = 'proto.org.kframework.kevm.extvm.GetBlockhash';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.GetBlockhash.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.GetBlockhash.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.GetBlockhash} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.GetBlockhash.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      offset: msg.getOffset()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.GetBlockhash}
 */
proto.org.kframework.kevm.extvm.GetBlockhash.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.GetBlockhash();
  return proto.org.kframework.kevm.extvm.GetBlockhash.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.GetBlockhash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.GetBlockhash}
 */
proto.org.kframework.kevm.extvm.GetBlockhash.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt32();
        msg.setOffset(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.GetBlockhash} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.GetBlockhash.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.GetBlockhash.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.GetBlockhash.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOffset();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.GetBlockhash} The clone.
 */
proto.org.kframework.kevm.extvm.GetBlockhash.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.GetBlockhash} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional int32 offset = 1;
 * @return {number}
 */
proto.org.kframework.kevm.extvm.GetBlockhash.prototype.getOffset = function () {
  return (/** @type {number} */jspb.Message.getFieldProto3(this, 1, 0)
  );
};

/** @param {number} value  */
proto.org.kframework.kevm.extvm.GetBlockhash.prototype.setOffset = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.Blockhash = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.kframework.kevm.extvm.Blockhash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.Blockhash.displayName = 'proto.org.kframework.kevm.extvm.Blockhash';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.Blockhash.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.Blockhash.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.Blockhash} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.Blockhash.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      hash: msg.getHash_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.Blockhash}
 */
proto.org.kframework.kevm.extvm.Blockhash.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.Blockhash();
  return proto.org.kframework.kevm.extvm.Blockhash.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.Blockhash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.Blockhash}
 */
proto.org.kframework.kevm.extvm.Blockhash.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.Blockhash} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.Blockhash.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.Blockhash.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.Blockhash.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.Blockhash} The clone.
 */
proto.org.kframework.kevm.extvm.Blockhash.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.Blockhash} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.Blockhash.prototype.getHash = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.Blockhash.prototype.getHash_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getHash())
  );
};

/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.Blockhash.prototype.getHash_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getHash())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.Blockhash.prototype.setHash = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.CallResult = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.kframework.kevm.extvm.CallResult.repeatedFields_, null);
};
goog.inherits(proto.org.kframework.kevm.extvm.CallResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.CallResult.displayName = 'proto.org.kframework.kevm.extvm.CallResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.kframework.kevm.extvm.CallResult.repeatedFields_ = [6, 7, 8, 9];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.CallResult.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.CallResult.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.CallResult} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.CallResult.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      returndata: msg.getReturndata_asB64(),
      returncode: msg.getReturncode_asB64(),
      gasremaining: msg.getGasremaining_asB64(),
      gasrefund: msg.getGasrefund_asB64(),
      error: msg.getError(),
      modifiedaccountsList: jspb.Message.toObjectList(msg.getModifiedaccountsList(), proto.org.kframework.kevm.extvm.ModifiedAccount.toObject, includeInstance),
      deletedaccountsList: msg.getDeletedaccountsList_asB64(),
      touchedaccountsList: msg.getTouchedaccountsList_asB64(),
      logsList: jspb.Message.toObjectList(msg.getLogsList(), proto.org.kframework.kevm.extvm.LogEntry.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.CallResult}
 */
proto.org.kframework.kevm.extvm.CallResult.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.CallResult();
  return proto.org.kframework.kevm.extvm.CallResult.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.CallResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.CallResult}
 */
proto.org.kframework.kevm.extvm.CallResult.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setReturndata(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setReturncode(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setGasremaining(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setGasrefund(value);
        break;
      case 5:
        var value = /** @type {boolean} */reader.readBool();
        msg.setError(value);
        break;
      case 6:
        var value = new proto.org.kframework.kevm.extvm.ModifiedAccount();
        reader.readMessage(value, proto.org.kframework.kevm.extvm.ModifiedAccount.deserializeBinaryFromReader);
        msg.getModifiedaccountsList().push(value);
        msg.setModifiedaccountsList(msg.getModifiedaccountsList());
        break;
      case 7:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.getDeletedaccountsList().push(value);
        msg.setDeletedaccountsList(msg.getDeletedaccountsList());
        break;
      case 8:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.getTouchedaccountsList().push(value);
        msg.setTouchedaccountsList(msg.getTouchedaccountsList());
        break;
      case 9:
        var value = new proto.org.kframework.kevm.extvm.LogEntry();
        reader.readMessage(value, proto.org.kframework.kevm.extvm.LogEntry.deserializeBinaryFromReader);
        msg.getLogsList().push(value);
        msg.setLogsList(msg.getLogsList());
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.CallResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.CallResult.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getReturndata_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = this.getReturncode_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = this.getGasremaining_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = this.getGasrefund_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = this.getError();
  if (f) {
    writer.writeBool(5, f);
  }
  f = this.getModifiedaccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(6, f, proto.org.kframework.kevm.extvm.ModifiedAccount.serializeBinaryToWriter);
  }
  f = this.getDeletedaccountsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(7, f);
  }
  f = this.getTouchedaccountsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(8, f);
  }
  f = this.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(9, f, proto.org.kframework.kevm.extvm.LogEntry.serializeBinaryToWriter);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.CallResult} The clone.
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.CallResult} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes returnData = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getReturndata = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes returnData = 1;
 * This is a type-conversion wrapper around `getReturndata()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getReturndata_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getReturndata())
  );
};

/**
 * optional bytes returnData = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReturndata()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getReturndata_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getReturndata())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.CallResult.prototype.setReturndata = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes returnCode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getReturncode = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 2, "")
  );
};

/**
 * optional bytes returnCode = 2;
 * This is a type-conversion wrapper around `getReturncode()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getReturncode_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getReturncode())
  );
};

/**
 * optional bytes returnCode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReturncode()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getReturncode_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getReturncode())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.CallResult.prototype.setReturncode = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional bytes gasRemaining = 3;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getGasremaining = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 3, "")
  );
};

/**
 * optional bytes gasRemaining = 3;
 * This is a type-conversion wrapper around `getGasremaining()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getGasremaining_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getGasremaining())
  );
};

/**
 * optional bytes gasRemaining = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasremaining()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getGasremaining_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getGasremaining())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.CallResult.prototype.setGasremaining = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional bytes gasRefund = 4;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getGasrefund = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 4, "")
  );
};

/**
 * optional bytes gasRefund = 4;
 * This is a type-conversion wrapper around `getGasrefund()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getGasrefund_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getGasrefund())
  );
};

/**
 * optional bytes gasRefund = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasrefund()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getGasrefund_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getGasrefund())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.CallResult.prototype.setGasrefund = function (value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional bool error = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getError = function () {
  return (/** @type {boolean} */jspb.Message.getFieldProto3(this, 5, false)
  );
};

/** @param {boolean} value  */
proto.org.kframework.kevm.extvm.CallResult.prototype.setError = function (value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * repeated ModifiedAccount modifiedAccounts = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.org.kframework.kevm.extvm.ModifiedAccount>}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getModifiedaccountsList = function () {
  return (/** @type{!Array.<!proto.org.kframework.kevm.extvm.ModifiedAccount>} */jspb.Message.getRepeatedWrapperField(this, proto.org.kframework.kevm.extvm.ModifiedAccount, 6)
  );
};

/** @param {Array.<!proto.org.kframework.kevm.extvm.ModifiedAccount>} value  */
proto.org.kframework.kevm.extvm.CallResult.prototype.setModifiedaccountsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};

proto.org.kframework.kevm.extvm.CallResult.prototype.clearModifiedaccountsList = function () {
  this.setModifiedaccountsList([]);
};

/**
 * repeated bytes deletedAccounts = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getDeletedaccountsList = function () {
  return (/** @type {!(Array<!Uint8Array>|Array<string>)} */jspb.Message.getField(this, 7)
  );
};

/**
 * repeated bytes deletedAccounts = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getDeletedaccountsList()`
 * @return {!Array.<string>}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getDeletedaccountsList_asB64 = function () {
  return (/** @type {!Array.<string>} */jspb.Message.bytesListAsB64(this.getDeletedaccountsList())
  );
};

/**
 * repeated bytes deletedAccounts = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeletedaccountsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getDeletedaccountsList_asU8 = function () {
  return (/** @type {!Array.<!Uint8Array>} */jspb.Message.bytesListAsU8(this.getDeletedaccountsList())
  );
};

/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.org.kframework.kevm.extvm.CallResult.prototype.setDeletedaccountsList = function (value) {
  jspb.Message.setField(this, 7, value || []);
};

proto.org.kframework.kevm.extvm.CallResult.prototype.clearDeletedaccountsList = function () {
  jspb.Message.setField(this, 7, []);
};

/**
 * repeated bytes touchedAccounts = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getTouchedaccountsList = function () {
  return (/** @type {!(Array<!Uint8Array>|Array<string>)} */jspb.Message.getField(this, 8)
  );
};

/**
 * repeated bytes touchedAccounts = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getTouchedaccountsList()`
 * @return {!Array.<string>}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getTouchedaccountsList_asB64 = function () {
  return (/** @type {!Array.<string>} */jspb.Message.bytesListAsB64(this.getTouchedaccountsList())
  );
};

/**
 * repeated bytes touchedAccounts = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTouchedaccountsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getTouchedaccountsList_asU8 = function () {
  return (/** @type {!Array.<!Uint8Array>} */jspb.Message.bytesListAsU8(this.getTouchedaccountsList())
  );
};

/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.org.kframework.kevm.extvm.CallResult.prototype.setTouchedaccountsList = function (value) {
  jspb.Message.setField(this, 8, value || []);
};

proto.org.kframework.kevm.extvm.CallResult.prototype.clearTouchedaccountsList = function () {
  jspb.Message.setField(this, 8, []);
};

/**
 * repeated LogEntry logs = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.org.kframework.kevm.extvm.LogEntry>}
 */
proto.org.kframework.kevm.extvm.CallResult.prototype.getLogsList = function () {
  return (/** @type{!Array.<!proto.org.kframework.kevm.extvm.LogEntry>} */jspb.Message.getRepeatedWrapperField(this, proto.org.kframework.kevm.extvm.LogEntry, 9)
  );
};

/** @param {Array.<!proto.org.kframework.kevm.extvm.LogEntry>} value  */
proto.org.kframework.kevm.extvm.CallResult.prototype.setLogsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};

proto.org.kframework.kevm.extvm.CallResult.prototype.clearLogsList = function () {
  this.setLogsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.ModifiedAccount = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.kframework.kevm.extvm.ModifiedAccount.repeatedFields_, null);
};
goog.inherits(proto.org.kframework.kevm.extvm.ModifiedAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.ModifiedAccount.displayName = 'proto.org.kframework.kevm.extvm.ModifiedAccount';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.repeatedFields_ = [4];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.ModifiedAccount.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.ModifiedAccount} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.ModifiedAccount.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      address: msg.getAddress_asB64(),
      nonce: msg.getNonce_asB64(),
      balance: msg.getBalance_asB64(),
      storageupdatesList: jspb.Message.toObjectList(msg.getStorageupdatesList(), proto.org.kframework.kevm.extvm.StorageUpdate.toObject, includeInstance),
      code: msg.getCode_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.ModifiedAccount}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.ModifiedAccount();
  return proto.org.kframework.kevm.extvm.ModifiedAccount.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.ModifiedAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.ModifiedAccount}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setNonce(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setBalance(value);
        break;
      case 4:
        var value = new proto.org.kframework.kevm.extvm.StorageUpdate();
        reader.readMessage(value, proto.org.kframework.kevm.extvm.StorageUpdate.deserializeBinaryFromReader);
        msg.getStorageupdatesList().push(value);
        msg.setStorageupdatesList(msg.getStorageupdatesList());
        break;
      case 5:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setCode(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.ModifiedAccount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = this.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = this.getBalance_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = this.getStorageupdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(4, f, proto.org.kframework.kevm.extvm.StorageUpdate.serializeBinaryToWriter);
  }
  f = this.getCode_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.ModifiedAccount} The clone.
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.ModifiedAccount} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.getAddress = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.getAddress_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getAddress())
  );
};

/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.getAddress_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAddress())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.setAddress = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes nonce = 2;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.getNonce = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 2, "")
  );
};

/**
 * optional bytes nonce = 2;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.getNonce_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getNonce())
  );
};

/**
 * optional bytes nonce = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.getNonce_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getNonce())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.setNonce = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional bytes balance = 3;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.getBalance = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 3, "")
  );
};

/**
 * optional bytes balance = 3;
 * This is a type-conversion wrapper around `getBalance()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.getBalance_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getBalance())
  );
};

/**
 * optional bytes balance = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBalance()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.getBalance_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getBalance())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.setBalance = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * repeated StorageUpdate storageUpdates = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.org.kframework.kevm.extvm.StorageUpdate>}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.getStorageupdatesList = function () {
  return (/** @type{!Array.<!proto.org.kframework.kevm.extvm.StorageUpdate>} */jspb.Message.getRepeatedWrapperField(this, proto.org.kframework.kevm.extvm.StorageUpdate, 4)
  );
};

/** @param {Array.<!proto.org.kframework.kevm.extvm.StorageUpdate>} value  */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.setStorageupdatesList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};

proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.clearStorageupdatesList = function () {
  this.setStorageupdatesList([]);
};

/**
 * optional bytes code = 5;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.getCode = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 5, "")
  );
};

/**
 * optional bytes code = 5;
 * This is a type-conversion wrapper around `getCode()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.getCode_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getCode())
  );
};

/**
 * optional bytes code = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCode()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.getCode_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getCode())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.ModifiedAccount.prototype.setCode = function (value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.StorageUpdate = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.kframework.kevm.extvm.StorageUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.StorageUpdate.displayName = 'proto.org.kframework.kevm.extvm.StorageUpdate';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.StorageUpdate.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.StorageUpdate.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.StorageUpdate} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.StorageUpdate.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      offset: msg.getOffset_asB64(),
      data: msg.getData_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.StorageUpdate}
 */
proto.org.kframework.kevm.extvm.StorageUpdate.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.StorageUpdate();
  return proto.org.kframework.kevm.extvm.StorageUpdate.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.StorageUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.StorageUpdate}
 */
proto.org.kframework.kevm.extvm.StorageUpdate.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setOffset(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.StorageUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.StorageUpdate.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.StorageUpdate.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.StorageUpdate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOffset_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = this.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.StorageUpdate} The clone.
 */
proto.org.kframework.kevm.extvm.StorageUpdate.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.StorageUpdate} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes offset = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.StorageUpdate.prototype.getOffset = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes offset = 1;
 * This is a type-conversion wrapper around `getOffset()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.StorageUpdate.prototype.getOffset_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getOffset())
  );
};

/**
 * optional bytes offset = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOffset()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.StorageUpdate.prototype.getOffset_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getOffset())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.StorageUpdate.prototype.setOffset = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.StorageUpdate.prototype.getData = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 2, "")
  );
};

/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.StorageUpdate.prototype.getData_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getData())
  );
};

/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.StorageUpdate.prototype.getData_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getData())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.StorageUpdate.prototype.setData = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.LogEntry = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.kframework.kevm.extvm.LogEntry.repeatedFields_, null);
};
goog.inherits(proto.org.kframework.kevm.extvm.LogEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.LogEntry.displayName = 'proto.org.kframework.kevm.extvm.LogEntry';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.kframework.kevm.extvm.LogEntry.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.LogEntry.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.LogEntry.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.LogEntry} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.LogEntry.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      address: msg.getAddress_asB64(),
      topicsList: msg.getTopicsList_asB64(),
      data: msg.getData_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.LogEntry}
 */
proto.org.kframework.kevm.extvm.LogEntry.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.LogEntry();
  return proto.org.kframework.kevm.extvm.LogEntry.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.LogEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.LogEntry}
 */
proto.org.kframework.kevm.extvm.LogEntry.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.getTopicsList().push(value);
        msg.setTopicsList(msg.getTopicsList());
        break;
      case 3:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.LogEntry} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.LogEntry.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.LogEntry.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.LogEntry.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = this.getTopicsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(2, f);
  }
  f = this.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.LogEntry} The clone.
 */
proto.org.kframework.kevm.extvm.LogEntry.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.LogEntry} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.LogEntry.prototype.getAddress = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 1, "")
  );
};

/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.LogEntry.prototype.getAddress_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getAddress())
  );
};

/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.LogEntry.prototype.getAddress_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAddress())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.LogEntry.prototype.setAddress = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated bytes topics = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.org.kframework.kevm.extvm.LogEntry.prototype.getTopicsList = function () {
  return (/** @type {!(Array<!Uint8Array>|Array<string>)} */jspb.Message.getField(this, 2)
  );
};

/**
 * repeated bytes topics = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array.<string>}
 */
proto.org.kframework.kevm.extvm.LogEntry.prototype.getTopicsList_asB64 = function () {
  return (/** @type {!Array.<string>} */jspb.Message.bytesListAsB64(this.getTopicsList())
  );
};

/**
 * repeated bytes topics = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.org.kframework.kevm.extvm.LogEntry.prototype.getTopicsList_asU8 = function () {
  return (/** @type {!Array.<!Uint8Array>} */jspb.Message.bytesListAsU8(this.getTopicsList())
  );
};

/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.org.kframework.kevm.extvm.LogEntry.prototype.setTopicsList = function (value) {
  jspb.Message.setField(this, 2, value || []);
};

proto.org.kframework.kevm.extvm.LogEntry.prototype.clearTopicsList = function () {
  jspb.Message.setField(this, 2, []);
};

/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.org.kframework.kevm.extvm.LogEntry.prototype.getData = function () {
  return (/** @type {!(string|Uint8Array)} */jspb.Message.getFieldProto3(this, 3, "")
  );
};

/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.org.kframework.kevm.extvm.LogEntry.prototype.getData_asB64 = function () {
  return (/** @type {string} */jspb.Message.bytesAsB64(this.getData())
  );
};

/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.LogEntry.prototype.getData_asU8 = function () {
  return (/** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getData())
  );
};

/** @param {!(string|Uint8Array)} value  */
proto.org.kframework.kevm.extvm.LogEntry.prototype.setData = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.kframework.kevm.extvm.VMQuery = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.org.kframework.kevm.extvm.VMQuery.oneofGroups_);
};
goog.inherits(proto.org.kframework.kevm.extvm.VMQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.org.kframework.kevm.extvm.VMQuery.displayName = 'proto.org.kframework.kevm.extvm.VMQuery';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.org.kframework.kevm.extvm.VMQuery.oneofGroups_ = [[1, 2, 3, 4, 5]];

/**
 * @enum {number}
 */
proto.org.kframework.kevm.extvm.VMQuery.QueryCase = {
  QUERY_NOT_SET: 0,
  GETACCOUNT: 1,
  GETSTORAGEDATA: 2,
  GETCODE: 3,
  GETBLOCKHASH: 4,
  CALLRESULT: 5
};

/**
 * @return {proto.org.kframework.kevm.extvm.VMQuery.QueryCase}
 */
proto.org.kframework.kevm.extvm.VMQuery.prototype.getQueryCase = function () {
  return (/** @type {proto.org.kframework.kevm.extvm.VMQuery.QueryCase} */jspb.Message.computeOneofCase(this, proto.org.kframework.kevm.extvm.VMQuery.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.VMQuery.prototype.toObject = function (opt_includeInstance) {
    return proto.org.kframework.kevm.extvm.VMQuery.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.org.kframework.kevm.extvm.VMQuery} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.org.kframework.kevm.extvm.VMQuery.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      getaccount: (f = msg.getGetaccount()) && proto.org.kframework.kevm.extvm.GetAccount.toObject(includeInstance, f),
      getstoragedata: (f = msg.getGetstoragedata()) && proto.org.kframework.kevm.extvm.GetStorageData.toObject(includeInstance, f),
      getcode: (f = msg.getGetcode()) && proto.org.kframework.kevm.extvm.GetCode.toObject(includeInstance, f),
      getblockhash: (f = msg.getGetblockhash()) && proto.org.kframework.kevm.extvm.GetBlockhash.toObject(includeInstance, f),
      callresult: (f = msg.getCallresult()) && proto.org.kframework.kevm.extvm.CallResult.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.kframework.kevm.extvm.VMQuery}
 */
proto.org.kframework.kevm.extvm.VMQuery.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.kframework.kevm.extvm.VMQuery();
  return proto.org.kframework.kevm.extvm.VMQuery.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.kframework.kevm.extvm.VMQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.kframework.kevm.extvm.VMQuery}
 */
proto.org.kframework.kevm.extvm.VMQuery.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.org.kframework.kevm.extvm.GetAccount();
        reader.readMessage(value, proto.org.kframework.kevm.extvm.GetAccount.deserializeBinaryFromReader);
        msg.setGetaccount(value);
        break;
      case 2:
        var value = new proto.org.kframework.kevm.extvm.GetStorageData();
        reader.readMessage(value, proto.org.kframework.kevm.extvm.GetStorageData.deserializeBinaryFromReader);
        msg.setGetstoragedata(value);
        break;
      case 3:
        var value = new proto.org.kframework.kevm.extvm.GetCode();
        reader.readMessage(value, proto.org.kframework.kevm.extvm.GetCode.deserializeBinaryFromReader);
        msg.setGetcode(value);
        break;
      case 4:
        var value = new proto.org.kframework.kevm.extvm.GetBlockhash();
        reader.readMessage(value, proto.org.kframework.kevm.extvm.GetBlockhash.deserializeBinaryFromReader);
        msg.setGetblockhash(value);
        break;
      case 5:
        var value = new proto.org.kframework.kevm.extvm.CallResult();
        reader.readMessage(value, proto.org.kframework.kevm.extvm.CallResult.deserializeBinaryFromReader);
        msg.setCallresult(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.org.kframework.kevm.extvm.VMQuery} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.VMQuery.serializeBinaryToWriter = function (message, writer) {
  message.serializeBinaryToWriter(writer);
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.kframework.kevm.extvm.VMQuery.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.org.kframework.kevm.extvm.VMQuery.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGetaccount();
  if (f != null) {
    writer.writeMessage(1, f, proto.org.kframework.kevm.extvm.GetAccount.serializeBinaryToWriter);
  }
  f = this.getGetstoragedata();
  if (f != null) {
    writer.writeMessage(2, f, proto.org.kframework.kevm.extvm.GetStorageData.serializeBinaryToWriter);
  }
  f = this.getGetcode();
  if (f != null) {
    writer.writeMessage(3, f, proto.org.kframework.kevm.extvm.GetCode.serializeBinaryToWriter);
  }
  f = this.getGetblockhash();
  if (f != null) {
    writer.writeMessage(4, f, proto.org.kframework.kevm.extvm.GetBlockhash.serializeBinaryToWriter);
  }
  f = this.getCallresult();
  if (f != null) {
    writer.writeMessage(5, f, proto.org.kframework.kevm.extvm.CallResult.serializeBinaryToWriter);
  }
};

/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.org.kframework.kevm.extvm.VMQuery} The clone.
 */
proto.org.kframework.kevm.extvm.VMQuery.prototype.cloneMessage = function () {
  return (/** @type {!proto.org.kframework.kevm.extvm.VMQuery} */jspb.Message.cloneMessage(this)
  );
};

/**
 * optional GetAccount getAccount = 1;
 * @return {proto.org.kframework.kevm.extvm.GetAccount}
 */
proto.org.kframework.kevm.extvm.VMQuery.prototype.getGetaccount = function () {
  return (/** @type{proto.org.kframework.kevm.extvm.GetAccount} */jspb.Message.getWrapperField(this, proto.org.kframework.kevm.extvm.GetAccount, 1)
  );
};

/** @param {proto.org.kframework.kevm.extvm.GetAccount|undefined} value  */
proto.org.kframework.kevm.extvm.VMQuery.prototype.setGetaccount = function (value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.org.kframework.kevm.extvm.VMQuery.oneofGroups_[0], value);
};

proto.org.kframework.kevm.extvm.VMQuery.prototype.clearGetaccount = function () {
  this.setGetaccount(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.org.kframework.kevm.extvm.VMQuery.prototype.hasGetaccount = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional GetStorageData getStorageData = 2;
 * @return {proto.org.kframework.kevm.extvm.GetStorageData}
 */
proto.org.kframework.kevm.extvm.VMQuery.prototype.getGetstoragedata = function () {
  return (/** @type{proto.org.kframework.kevm.extvm.GetStorageData} */jspb.Message.getWrapperField(this, proto.org.kframework.kevm.extvm.GetStorageData, 2)
  );
};

/** @param {proto.org.kframework.kevm.extvm.GetStorageData|undefined} value  */
proto.org.kframework.kevm.extvm.VMQuery.prototype.setGetstoragedata = function (value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.org.kframework.kevm.extvm.VMQuery.oneofGroups_[0], value);
};

proto.org.kframework.kevm.extvm.VMQuery.prototype.clearGetstoragedata = function () {
  this.setGetstoragedata(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.org.kframework.kevm.extvm.VMQuery.prototype.hasGetstoragedata = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional GetCode getCode = 3;
 * @return {proto.org.kframework.kevm.extvm.GetCode}
 */
proto.org.kframework.kevm.extvm.VMQuery.prototype.getGetcode = function () {
  return (/** @type{proto.org.kframework.kevm.extvm.GetCode} */jspb.Message.getWrapperField(this, proto.org.kframework.kevm.extvm.GetCode, 3)
  );
};

/** @param {proto.org.kframework.kevm.extvm.GetCode|undefined} value  */
proto.org.kframework.kevm.extvm.VMQuery.prototype.setGetcode = function (value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.org.kframework.kevm.extvm.VMQuery.oneofGroups_[0], value);
};

proto.org.kframework.kevm.extvm.VMQuery.prototype.clearGetcode = function () {
  this.setGetcode(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.org.kframework.kevm.extvm.VMQuery.prototype.hasGetcode = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional GetBlockhash getBlockhash = 4;
 * @return {proto.org.kframework.kevm.extvm.GetBlockhash}
 */
proto.org.kframework.kevm.extvm.VMQuery.prototype.getGetblockhash = function () {
  return (/** @type{proto.org.kframework.kevm.extvm.GetBlockhash} */jspb.Message.getWrapperField(this, proto.org.kframework.kevm.extvm.GetBlockhash, 4)
  );
};

/** @param {proto.org.kframework.kevm.extvm.GetBlockhash|undefined} value  */
proto.org.kframework.kevm.extvm.VMQuery.prototype.setGetblockhash = function (value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.org.kframework.kevm.extvm.VMQuery.oneofGroups_[0], value);
};

proto.org.kframework.kevm.extvm.VMQuery.prototype.clearGetblockhash = function () {
  this.setGetblockhash(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.org.kframework.kevm.extvm.VMQuery.prototype.hasGetblockhash = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional CallResult callResult = 5;
 * @return {proto.org.kframework.kevm.extvm.CallResult}
 */
proto.org.kframework.kevm.extvm.VMQuery.prototype.getCallresult = function () {
  return (/** @type{proto.org.kframework.kevm.extvm.CallResult} */jspb.Message.getWrapperField(this, proto.org.kframework.kevm.extvm.CallResult, 5)
  );
};

/** @param {proto.org.kframework.kevm.extvm.CallResult|undefined} value  */
proto.org.kframework.kevm.extvm.VMQuery.prototype.setCallresult = function (value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.org.kframework.kevm.extvm.VMQuery.oneofGroups_[0], value);
};

proto.org.kframework.kevm.extvm.VMQuery.prototype.clearCallresult = function () {
  this.setCallresult(undefined);
};

/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.org.kframework.kevm.extvm.VMQuery.prototype.hasCallresult = function () {
  return jspb.Message.getField(this, 5) != null;
};

goog.object.extend(exports, proto.org.kframework.kevm.extvm);